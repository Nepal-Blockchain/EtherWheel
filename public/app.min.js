!function(){"use strict";angular.module("ether-wheel",["ngRoute","rzModule","oitozero.ngSweetAlert","angularMoment"]).config(["$routeProvider",function(t){t.otherwise({redirectTo:"/"})}])}(),function(){"use strict";function t(t){var e=[{constant:!0,inputs:[{name:"",type:"uint256"}],name:"contributors",outputs:[{name:"",type:"address"}],type:"function"},{constant:!0,inputs:[],name:"goal",outputs:[{name:"",type:"uint256"}],type:"function"},{constant:!0,inputs:[{name:"",type:"address"}],name:"contributions",outputs:[{name:"",type:"uint256"}],type:"function"},{constant:!1,inputs:[{name:"newHost",type:"address"}],name:"changeHost",outputs:[],type:"function"},{constant:!1,inputs:[],name:"destroy",outputs:[],type:"function"},{constant:!1,inputs:[{name:"amount",type:"uint256"}],name:"setContribution",outputs:[],type:"function"},{constant:!0,inputs:[],name:"numWinners",outputs:[{name:"",type:"uint256"}],type:"function"},{constant:!0,inputs:[],name:"numContributors",outputs:[{name:"",type:"uint256"}],type:"function"},{constant:!1,inputs:[],name:"addToContribution",outputs:[],type:"function"},{constant:!0,inputs:[],name:"increment",outputs:[{name:"",type:"uint256"}],type:"function"},{constant:!1,inputs:[{name:"amount",type:"uint256"}],name:"removeFromContribution",outputs:[],type:"function"},{constant:!0,inputs:[{name:"",type:"uint256"}],name:"recentWins",outputs:[{name:"winner",type:"address"},{name:"timestamp",type:"uint256"},{name:"contribution",type:"uint256"}],type:"function"},{constant:!0,inputs:[],name:"host",outputs:[{name:"",type:"address"}],type:"function"},{inputs:[{name:"_goalInFinney",type:"uint256"},{name:"_incrementInFinney",type:"uint256"},{name:"_recentWinsCount",type:"uint8"}],type:"constructor"},{anonymous:!1,inputs:[{indexed:!1,name:"winner",type:"address"},{indexed:!1,name:"timestamp",type:"uint256"},{indexed:!1,name:"contribution",type:"uint256"}],name:"Won",type:"event"},{anonymous:!1,inputs:[{indexed:!1,name:"contributor",type:"address"}],name:"ChangedContribution",type:"event"}],n=function(n,o,i){this.address=n,this.contributionChangedCallback=o,this.roundEndedCallback=i;var r=t.web3.eth.contract(e);this.contract=r.at(n),this.goal=t.web3.fromWei(this.contract.goal(),"ether").toString(),this.increment=t.web3.fromWei(this.contract.increment(),"ether").toString(),this.contributorsData={},this.desiredContribution=0,this.contract.ChangedContribution().watch(this.onContributionChanged.bind(this)),this.contract.Won().watch(this.onWon.bind(this)),this.initializeContributorsData(),this.updateContractData(),this.refreshRecentWinsList()};return n.prototype.updateContractData=function(){var e=t.web3.eth.getBalance(this.address),n=t.web3.fromWei(e,"ether");this.balance=parseFloat(n.toString())},n.prototype.initializeContributorsData=function(){if(t.isConnected()){this.contributorsData={};for(var e=this.contract.numContributors().toString(),n=0;e>n;++n){var o=this.contract.contributors(n).toString();this.addContributor(o,n)}}},n.prototype.addContributor=function(e,n){this.contributorsData[e]={address:e,contribution:parseFloat(t.web3.fromWei(this.contract.contributions(e),"ether").toString()),index:n}},n.prototype.refreshRecentWinsList=function(){this.recentWins=[];for(var t=this.contract.numWinners(),e=0;t>e;++e)this.recentWins.push(this.contract.recentWins(e))},n.prototype.getContribution=function(t){var e=0;return t in this.contributorsData&&(e=this.contributorsData[t].contribution),e},n.prototype.getAdjustedBalance=function(t){var e=this.desiredContribution-this.getContribution(t);return this.balance+e},n.prototype.setContribution=function(e,n,o){var i=t.web3.toWei(n,"ether")-t.web3.toWei(this.getContribution(e),"ether"),r=t.web3.toWei(n,"ether"),s=0;i>0&&(s=i);var a=this.contract.setContribution.getData(r),c={value:s,from:e,to:this.address,data:a};c.gas=t.web3.eth.estimateGas(c)+1e5,this.contract.setContribution(r,c,o)},n.prototype.onContributionChanged=function(e,n){if(e)return void console.log(e);var o=n.args.contributor,i=parseFloat(t.web3.fromWei(this.contract.contributions(o),"ether").toString()),r=!(o in this.contributorsData);r?this.addContributor(o,i):this.contributorsData[o].contribution=i,this.updateContractData(),this.contributionChangedCallback&&this.contributionChangedCallback(this,o,i,r)},n.prototype.onWon=function(t,e){return t?void console.log(t):(this.desiredContribution=0,this.updateContractData(),this.refreshRecentWinsList(),void(this.roundEndedCallback&&this.roundEndedCallback(this,e.args.winner)))},n}t.$inject=["ethereum"],angular.module("ether-wheel").factory("Wheel",t)}(),function(){"use strict";function t(t,e,n,o,i){function r(){W.isConnected=o.isConnected(),W.isConnected&&(s(),v.addData({value:1,color:g,label:C}),W.wheels=[],y.forEach(function(t){var e=new i(t,m,f);W.wheels.push(e)}),l(W.wheels[0]),W.accounts=o.web3.eth.accounts,W.selectedAccount=o.web3.eth.defaultAccount,W.selectedAccount||(W.selectedAccount=o.web3.eth.coinbase),p())}function s(){function t(t){var e=t.label===W.selectedAccount?"You":t.label,n=e+": "+t.value.toFixed(2)+" Îž";if(W.goal){var o=t.value/W.goal*100;n+=" ("+Math.round(100*o)/100+"%)"}return n}v&&v.destroy();var e={animationEasing:"easeInOut",segmentStrokeWidth:3,animationSteps:20,segmentStrokeColor:"#EBF0F1",percentageInnerCutout:75,responsive:!0,tooltipTemplate:t},n=document.getElementById("wheel").getContext("2d");v=new Chart(n).Doughnut([],e)}function a(t){var e=t.contributorsData;for(var n in e){var o=e[n],i={label:o.address,value:o.contribution,color:d(o.address)};v.addData(i,o.index)}v.addData({label:C,color:g,value:W.selectedWheel.goal-W.selectedWheel.getAdjustedBalance(W.selectedAccount)}),v.update()}function c(){v.segments[v.segments.length-1].value=W.selectedWheel.goal-W.selectedWheel.getAdjustedBalance(W.selectedAccount),v.update()}function u(){var t=W.selectedWheel.contributorsData;if(W.selectedAccount in t){var e=t[W.selectedAccount].index;v.segments[e].value=W.selectedWheel.desiredContribution}else{var e=Object.keys(t).length;W.selectedWheel.addContributor(W.selectedAccount,e);var n={label:W.selectedAccount,value:W.selectedWheel.desiredContribution,color:d(W.selectedAccount)};v.addData(n,e-2)}c()}function d(t){return t===W.selectedAccount?"#5cb85c":"#3D3E3F"}function l(t){W.selectedWheel!==t&&(W.selectedWheel=t,W.selectedWheel.desiredContribution=W.selectedWheel.getContribution(W.selectedAccount),s(),a(W.selectedWheel),u())}function h(){function t(t,e){if(t){var o=t;o+="<br><br>Make sure you've unlocked your account to make transactions (e.g. using the --unlock command with geth). If you're having trouble, you can also set your contribution by sending ether directly to the wheel at:<br><code>"+W.selectedWheel.address+'</code><br>(<i class="fa fa-lock" style="font-size: 0.8em; margin-right: 2px;"></i> <a href="https://live.ether.camp/account/'+W.selectedWheel.address.substring(2)+'/contract">view verified source code</a>)',n.swal({title:"Error Setting Contribution",text:o,type:"error",html:!0})}else n.swal({title:"Success!",text:"Your request has been successfully sent to the Ethereum network for processing. You'll see your account balance updated soon.<br><br><strong>This may take a minute or two</strong>.",type:"success",html:!0}),W.selectedWheel.desiredContribution=W.selectedWheel.getContribution(W.selectedAccount),v.segments[W.selectedWheel.contributorsData[W.selectedAccount].index].value=W.selectedWheel.getContribution(W.selectedAccount),c()}W.selectedWheel.setContribution(W.selectedAccount,W.selectedWheel.desiredContribution,t)}function b(t){return o.web3.fromWei(o.web3.eth.getBalance(t),"ether")}function p(){W.wheels.forEach(function(t){t.desiredContribution=t.getContribution(W.selectedAccount)}),s(),a(W.selectedWheel)}function m(t,n,o,i){if(n==W.selectedAccount&&(W.selectedWheel.desiredContribution=o),t==W.selectedWheel){var r=W.selectedWheel.contributorsData,s=r[n].index;if(i){var a={label:n,value:o,color:d(n)};v.addData(a,s)}else v.segments[r[n].index].value=o;c()}e.$apply()}function f(t,n){W.selectedWheel.desiredContribution=W.selectedWheel.getContribution(W.selectedAccount),e.$apply()}var g="#dce6e9",C="Empty",y=["0x53891ef3793d8534Ad42312BcC77dFAd51Bb5F1C","0x27C0aFc960FbeaB1c6BbA6bE3837d40E948B2250","0x1107BD232640434008b8ce1FD058837E141f754B"],v=null,W=this;W.web3=o.web3,W.moment=moment,W.selectWheel=l,W.getAccountBalance=b,W.onAccountChanged=p,W.setContribution=h,W.onSliderChanged=u,r()}t.$inject=["$route","$scope","SweetAlert","ethereum","Wheel"],angular.module("ether-wheel").controller("WheelCtrl",t)}(),function(){"use strict";function t(){function t(){n.web3.setProvider(new n.web3.providers.HttpProvider("http://localhost:8545"))}function e(){return n.web3.currentProvider.isConnected()}var n={web3:new Web3,isConnected:e};return t(),n}angular.module("ether-wheel").service("ethereum",t)}();
//# sourceMappingURL=data:application/json;base64,
