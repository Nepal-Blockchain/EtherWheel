!function(){"use strict";angular.module("ether-spinner",["ngRoute","rzModule"]).config(["$routeProvider",function(e){e.otherwise({redirectTo:"/"})}])}(),function(){"use strict";function e(e,t,n){function a(){if(o(),n.isConnected()){var e=[{constant:!0,inputs:[{name:"",type:"address"}],name:"stakes",outputs:[{name:"",type:"uint256"}],type:"function"},{constant:!0,inputs:[{name:"",type:"uint256"}],name:"stakeholders",outputs:[{name:"",type:"address"}],type:"function"},{constant:!0,inputs:[],name:"goal",outputs:[{name:"",type:"uint256"}],type:"function"},{constant:!1,inputs:[],name:"refundStake",outputs:[],type:"function"},{constant:!1,inputs:[],name:"destroy",outputs:[],type:"function"},{constant:!0,inputs:[],name:"increment",outputs:[{name:"",type:"uint256"}],type:"function"},{constant:!0,inputs:[],name:"numStakeholders",outputs:[{name:"",type:"uint256"}],type:"function"},{constant:!1,inputs:[{name:"rejectPartialBets",type:"bool"}],name:"buyStake",outputs:[],type:"function"},{constant:!0,inputs:[{name:"",type:"uint256"}],name:"recentWins",outputs:[{name:"winner",type:"address"},{name:"timestamp",type:"uint256"},{name:"stake",type:"uint256"}],type:"function"},{constant:!0,inputs:[],name:"host",outputs:[{name:"",type:"address"}],type:"function"},{inputs:[{name:"_goalInFinney",type:"uint256"},{name:"_incrementInFinney",type:"uint256"},{name:"_recentWinsCount",type:"uint8"}],type:"constructor"},{anonymous:!1,inputs:[{indexed:!1,name:"winner",type:"address"},{indexed:!1,name:"timestamp",type:"uint256"},{indexed:!1,name:"stake",type:"uint256"}],name:"Won",type:"event"},{anonymous:!1,inputs:[{indexed:!1,name:"stakeholder",type:"address"}],name:"ChangedStake",type:"event"}],t=n.web3.eth.contract(e);h=t.at(g),p.goal=n.web3.fromWei(h.goal(),"ether").toString(),p.sliderStep=n.web3.fromWei(h.increment(),"ether").toString(),p.onSliderChanged=l,v.value=p.goal,p.accounts=n.web3.eth.accounts,p.selectedAccount=n.web3.eth.defaultAccount,p.selectedAccount||(p.selectedAccount=n.web3.eth.coinbase),i(),u(),s(),p.newBalance=p.balance-p.desiredStakes,r();var a=h.ChangedStake();a.watch(c);var m=h.Won();m.watch(d)}}function o(){var e=[v],t={animationEasing:"easeInOut",segmentStrokeWidth:3,animationSteps:20,segmentStrokeColor:"#EBF0F1",percentageInnerCutout:75,responsive:!0,tooltipTemplate:function(e){var t=e.label===p.selectedAccount?"You":e.label,n=t+": "+e.value+" Îž";if(p.goal){var a=e.value/p.goal*100;n+=" ("+Math.round(100*a)/100+"%)"}return n}},n=document.getElementById("wheel").getContext("2d");m=new Chart(n).Doughnut(e,t)}function s(){if(n.isConnected()){var e=n.web3.eth.getBalance(g),t=n.web3.fromWei(e,"ether"),a=p.desiredStakes-p.currentStakes;p.balance=parseFloat(t.toString()),p.newBalance=p.balance+a,m.segments[m.segments.length-1].value=p.goal-p.newBalance,m.update()}}function u(){n.isConnected()&&(p.currentStakes=parseFloat(n.web3.fromWei(h.stakes(p.selectedAccount),"ether").toString()),p.desiredStakes=p.currentStakes)}function i(){if(n.isConnected()){m.removeData(),f={};for(var e=h.numStakeholders(),t=0;e>t;++t){var a=h.stakeholders(t).toString();f[a]={label:a,value:n.web3.fromWei(h.stakes(a),"ether"),color:a===p.selectedAccount?"#5cb85c":"#3D3E3F",index:t},m.addData(f[a])}m.addData(v),m.update()}}function r(){!n.isConnected()}function c(e,a){if(!e){var o=a.args.stakeholder.toString(),i=n.web3.fromWei(h.stakes(o),"ether");if(o in f)m.segments[f[o].index].value=i;else{var r=Object.keys(f).length;f[o]={label:o,value:i,color:o===p.selectedAccount?"#5cb85c":"#3D3E3F",index:r},m.addData(f[o],r),console.log(r)}m.update()}s(),u(),t.$apply()}function d(e,n){s(),u(),r(),t.$apply()}function l(e,t){m.segments[f[p.selectedAccount.toString()].index].value=t,s()}var p=this;p.isConnected=n.isConnected;var m,f,y="#dae4e7",g="0xaCD9e1e68622285Cc3d339D04b76BA7acEE6FC1C",h=null,v={value:5,color:y,label:"Empty"};a()}e.$inject=["$route","$scope","ethereum"],angular.module("ether-spinner").controller("SpinnerCtrl",e)}(),function(){"use strict";function e(){function e(){n.web3.setProvider(new n.web3.providers.HttpProvider("http://localhost:8545"))}function t(){return n.web3.currentProvider.isConnected()}var n={web3:new Web3,isConnected:t};return e(),n}angular.module("ether-spinner").service("ethereum",e)}();
//# sourceMappingURL=data:application/json;base64,
