!function(){"use strict";angular.module("ether-spinner",["ngRoute","chart.js","rzModule"]).config(["$routeProvider",function(e){e.otherwise({redirectTo:"/"})}])}(),function(){"use strict";function e(e,t,n){function a(){if(n.isConnected()){var e=[{constant:!0,inputs:[{name:"",type:"address"}],name:"stakes",outputs:[{name:"",type:"uint256"}],type:"function"},{constant:!0,inputs:[{name:"",type:"uint256"}],name:"stakeholders",outputs:[{name:"",type:"address"}],type:"function"},{constant:!0,inputs:[],name:"goal",outputs:[{name:"",type:"uint256"}],type:"function"},{constant:!1,inputs:[],name:"refundStake",outputs:[],type:"function"},{constant:!1,inputs:[],name:"destroy",outputs:[],type:"function"},{constant:!0,inputs:[],name:"increment",outputs:[{name:"",type:"uint256"}],type:"function"},{constant:!0,inputs:[],name:"numStakeholders",outputs:[{name:"",type:"uint256"}],type:"function"},{constant:!1,inputs:[{name:"rejectPartialBets",type:"bool"}],name:"buyStake",outputs:[],type:"function"},{constant:!0,inputs:[{name:"",type:"uint256"}],name:"recentWins",outputs:[{name:"winner",type:"address"},{name:"timestamp",type:"uint256"},{name:"stake",type:"uint256"}],type:"function"},{constant:!0,inputs:[],name:"host",outputs:[{name:"",type:"address"}],type:"function"},{inputs:[{name:"_goalInFinney",type:"uint256"},{name:"_incrementInFinney",type:"uint256"},{name:"_recentWinsCount",type:"uint8"}],type:"constructor"},{anonymous:!1,inputs:[{indexed:!1,name:"winner",type:"address"},{indexed:!1,name:"timestamp",type:"uint256"},{indexed:!1,name:"stake",type:"uint256"}],name:"Won",type:"event"},{anonymous:!1,inputs:[{indexed:!1,name:"stakeholder",type:"address"}],name:"ChangedStake",type:"event"}],t=n.web3.eth.contract(e);h=t.at(m),l.goal=n.web3.fromWei(h.goal(),"ether").toString(),l.sliderStep=n.web3.fromWei(h.increment(),"ether").toString(),l.onSliderChanged=p,l.accounts=n.web3.eth.accounts,l.selectedAccount=n.web3.eth.defaultAccount,l.selectedAccount||(l.selectedAccount=n.web3.eth.coinbase),s(),o(),u(),i();var a=h.ChangedStake();a.watch(r);var d=h.Won();d.watch(c)}}function o(){if(n.isConnected()){var e=n.web3.eth.getBalance(m),t=n.web3.fromWei(e,"ether");l.balance=parseFloat(t.toString())}}function s(){n.isConnected()&&(l.currentStakes=n.web3.fromWei(h.stakes(l.selectedAccount),"ether").toString(),l.desiredStakes=l.currentStakes)}function u(){if(n.isConnected()){l.stakeIndices={},l.wheelLabels.length=0,l.wheelData.length=0,l.wheelColours.length=0;for(var e=h.numStakeholders(),t=0;e>t;++t){var a=h.stakeholders(t);l.wheelLabels.push(a.toString()),l.wheelData.push(n.web3.fromWei(h.stakes(a),"ether")),l.wheelColours.push("#C99D66"),l.stakeIndices[a.toString()]=t}l.wheelLabels.push("Empty"),l.wheelData.push(n.web3.fromWei(h.goal()-n.web3.eth.getBalance(m),"ether")),l.wheelColours.push(d)}}function i(){!n.isConnected()}function r(e,n){o(),s(),u(),t.$apply()}function c(e,n){o(),s(),u(),i(),t.$apply()}function p(e,t){l.wheelData[l.stakeIndices[l.selectedAccount.toString()]]=t}var l=this;l.isConnected=n.isConnected;var d="#3D3E3F";l.wheelLabels=["Empty"],l.wheelData=[5],l.wheelColours=[d];var m="0xaCD9e1e68622285Cc3d339D04b76BA7acEE6FC1C",h=null;a()}e.$inject=["$route","$scope","ethereum"],angular.module("ether-spinner").controller("SpinnerCtrl",e)}(),function(){"use strict";function e(){function e(){n.web3.setProvider(new n.web3.providers.HttpProvider("http://localhost:8545"))}function t(){return n.web3.currentProvider.isConnected()}var n={web3:new Web3,isConnected:t};return e(),n}angular.module("ether-spinner").service("ethereum",e)}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsInNwaW5uZXIuY29udHJvbGxlci5qcyIsImFwcC5taW4uanMiLCJldGhlcmV1bS5zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIm90aGVyd2lzZSIsInJlZGlyZWN0VG8iLCJTcGlubmVyQ3RybCIsIiRyb3V0ZSIsIiRzY29wZSIsImV0aGVyZXVtIiwiYWN0aXZhdGUiLCJpc0Nvbm5lY3RlZCIsImFiaSIsImNvbnN0YW50IiwiaW5wdXRzIiwibmFtZSIsInR5cGUiLCJvdXRwdXRzIiwiYW5vbnltb3VzIiwiaW5kZXhlZCIsImNvbnRyYWN0Qmx1ZXByaW50Iiwid2ViMyIsImV0aCIsImNvbnRyYWN0IiwiYXQiLCJjb250cmFjdEFkZHJlc3MiLCJ2bSIsImdvYWwiLCJmcm9tV2VpIiwidG9TdHJpbmciLCJzbGlkZXJTdGVwIiwiaW5jcmVtZW50Iiwib25TbGlkZXJDaGFuZ2VkIiwiYWNjb3VudHMiLCJzZWxlY3RlZEFjY291bnQiLCJkZWZhdWx0QWNjb3VudCIsImNvaW5iYXNlIiwidXBkYXRlU3Rha2VzIiwidXBkYXRlQmFsYW5jZSIsInVwZGF0ZUNoYXJ0IiwidXBkYXRlUmVjZW50UmVzdWx0cyIsIm9uU3Rha2VDaGFuZ2VkRXZlbnQiLCJDaGFuZ2VkU3Rha2UiLCJ3YXRjaCIsIm9uU3Rha2VDaGFuZ2VkIiwib25Xb25FdmVudCIsIldvbiIsIm9uV29uIiwid2VpIiwiZ2V0QmFsYW5jZSIsImV0aGVyIiwiYmFsYW5jZSIsInBhcnNlRmxvYXQiLCJjdXJyZW50U3Rha2VzIiwic3Rha2VzIiwiZGVzaXJlZFN0YWtlcyIsInN0YWtlSW5kaWNlcyIsIndoZWVsTGFiZWxzIiwibGVuZ3RoIiwid2hlZWxEYXRhIiwid2hlZWxDb2xvdXJzIiwibnVtU3Rha2Vob2xkZXJzIiwiaSIsInN0YWtlaG9sZGVyIiwic3Rha2Vob2xkZXJzIiwicHVzaCIsImVtcHR5QmFyQ29sb3VyIiwiZXJyb3IiLCJyZXN1bHQiLCIkYXBwbHkiLCJzbGlkZXJJZCIsIm1vZGVsVmFsdWUiLCJ0aGlzIiwiJGluamVjdCIsImNvbnRyb2xsZXIiLCJzZXJ2aWNlIiwic2V0UHJvdmlkZXIiLCJwcm92aWRlcnMiLCJIdHRwUHJvdmlkZXIiLCJjdXJyZW50UHJvdmlkZXIiLCJXZWIzIl0sIm1hcHBpbmdzIjoiQ0FBQSxXQUNFLFlBRUFBLFNBQVFDLE9BQU8saUJBQ2IsVUFDQSxXQUNBLGFBRUZDLFFBQVEsaUJBQWtCLFNBQVNDLEdBQ2pDQSxFQUFlQyxXQUFXQyxXQUFZLFlDVDFDLFdBQ0UsWUFLQSxTQUFTQyxHQUFZQyxFQUFRQyxFQUFRQyxHQWdCbkMsUUFBU0MsS0FDUCxHQUFJRCxFQUFTRSxjQUFiLENBRUEsR0FBSUMsS0FBUUMsVUFBVyxFQUFLQyxTQUFXQyxLQUFPLEdBQUdDLEtBQU8sWUFBWUQsS0FBTyxTQUFTRSxVQUFZRixLQUFPLEdBQUdDLEtBQU8sWUFBWUEsS0FBTyxhQUFhSCxVQUFXLEVBQUtDLFNBQVdDLEtBQU8sR0FBR0MsS0FBTyxZQUFZRCxLQUFPLGVBQWVFLFVBQVlGLEtBQU8sR0FBR0MsS0FBTyxZQUFZQSxLQUFPLGFBQWFILFVBQVcsRUFBS0MsVUFBWUMsS0FBTyxPQUFPRSxVQUFZRixLQUFPLEdBQUdDLEtBQU8sWUFBWUEsS0FBTyxhQUFhSCxVQUFXLEVBQU1DLFVBQVlDLEtBQU8sY0FBY0UsV0FBYUQsS0FBTyxhQUFhSCxVQUFXLEVBQU1DLFVBQVlDLEtBQU8sVUFBVUUsV0FBYUQsS0FBTyxhQUFhSCxVQUFXLEVBQUtDLFVBQVlDLEtBQU8sWUFBWUUsVUFBWUYsS0FBTyxHQUFHQyxLQUFPLFlBQVlBLEtBQU8sYUFBYUgsVUFBVyxFQUFLQyxVQUFZQyxLQUFPLGtCQUFrQkUsVUFBWUYsS0FBTyxHQUFHQyxLQUFPLFlBQVlBLEtBQU8sYUFBYUgsVUFBVyxFQUFNQyxTQUFXQyxLQUFPLG9CQUFvQkMsS0FBTyxTQUFTRCxLQUFPLFdBQVdFLFdBQWFELEtBQU8sYUFBYUgsVUFBVyxFQUFL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RCxJQUNBRSxJQUNBL0IsRUFBTzZELFNBR1QsUUFBU3RCLEdBQU1vQixFQUFPQyxHQUNwQjlCLElBQ0FELElBQ0FFLElBQ0FDLElBQ0FoQyxFQUFPNkQsU0FHVCxRQUFTckMsR0FBZ0JzQyxFQUFVQyxHQUNqQzdDLEVBQUdpQyxVQUFVakMsRUFBRzhCLGFBQWE5QixFQUFHUSxnQkFBZ0JMLGFBQWUwQyxFQXBHakUsR0FBSTdDLEdBQUs4QyxJQUNUOUMsR0FBR2YsWUFBY0YsRUFBU0UsV0FFMUIsSUFBSXVELEdBQWlCLFNBQ3JCeEMsR0FBRytCLGFBQWUsU0FDbEIvQixFQUFHaUMsV0FBYSxHQUNoQmpDLEVBQUdrQyxjQUFnQk0sRUFFbkIsSUFBSXpDLEdBQWtCLDZDQUNsQkYsRUFBVyxJQUVmYixLQ0ZGSixFQUFZbUUsU0FBVyxTQUFVLFNBQVUsWURiM0N6RSxRQUFRQyxPQUFPLGlCQUFpQnlFLFdBQVcsY0FBZXBFLE1FSDVELFdBQ0ksWUFLQSxTQUFTRyxLQVlQLFFBQVNDLEtBQ1BpRSxFQUFRdEQsS0FBS3VELFlBQVksR0FBSUQsR0FBUXRELEtBQUt3RCxVQUFVQyxhQUFhLDBCQUduRSxRQUFTbkUsS0FDUCxNQUFPZ0UsR0FBUXRELEtBQUswRCxnQkFBZ0JwRSxjQWhCdEMsR0FBSWdFLElBQ0Z0RCxLQUFNLEdBQUkyRCxNQUNWckUsWUFBYUEsRUFLZixPQUZBRCxLQUVPaUUsRUFYVDNFLFFBQVFDLE9BQU8saUJBQWlCMEUsUUFBUSxXQUFZbEUiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXIubW9kdWxlKCdldGhlci1zcGlubmVyJywgW1xuICAgICduZ1JvdXRlJyxcbiAgICAnY2hhcnQuanMnLFxuICAgICdyek1vZHVsZSdcbiAgXSkuXG4gIGNvbmZpZyhbJyRyb3V0ZVByb3ZpZGVyJywgZnVuY3Rpb24oJHJvdXRlUHJvdmlkZXIpIHtcbiAgICAkcm91dGVQcm92aWRlci5vdGhlcndpc2Uoe3JlZGlyZWN0VG86ICcvJ30pO1xuICB9XSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhci5tb2R1bGUoJ2V0aGVyLXNwaW5uZXInKS5jb250cm9sbGVyKCdTcGlubmVyQ3RybCcsIFNwaW5uZXJDdHJsKTtcblxuICAvKkBuZ0luamVjdCovXG4gIGZ1bmN0aW9uIFNwaW5uZXJDdHJsKCRyb3V0ZSwgJHNjb3BlLCBldGhlcmV1bSkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdm0uaXNDb25uZWN0ZWQgPSBldGhlcmV1bS5pc0Nvbm5lY3RlZDtcblxuICAgIHZhciBlbXB0eUJhckNvbG91ciA9ICcjM0QzRTNGJztcbiAgICB2bS53aGVlbExhYmVscyA9IFtcIkVtcHR5XCJdO1xuICAgIHZtLndoZWVsRGF0YSA9IFs1LjBdO1xuICAgIHZtLndoZWVsQ29sb3VycyA9IFtlbXB0eUJhckNvbG91cl07XG5cbiAgICB2YXIgY29udHJhY3RBZGRyZXNzID0gJzB4YUNEOWUxZTY4NjIyMjg1Q2MzZDMzOUQwNGI3NkJBN2FjRUU2RkMxQyc7XG4gICAgdmFyIGNvbnRyYWN0ID0gbnVsbDtcblxuICAgIGFjdGl2YXRlKCk7XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgIGlmKCFldGhlcmV1bS5pc0Nvbm5lY3RlZCgpKSB7IHJldHVybjsgfVxuXG4gICAgICB2YXIgYWJpID0gW3tcImNvbnN0YW50XCI6dHJ1ZSxcImlucHV0c1wiOlt7XCJuYW1lXCI6XCJcIixcInR5cGVcIjpcImFkZHJlc3NcIn1dLFwibmFtZVwiOlwic3Rha2VzXCIsXCJvdXRwdXRzXCI6W3tcIm5hbWVcIjpcIlwiLFwidHlwZVwiOlwidWludDI1NlwifV0sXCJ0eXBlXCI6XCJmdW5jdGlvblwifSx7XCJjb25zdGFudFwiOnRydWUsXCJpbnB1dHNcIjpbe1wibmFtZVwiOlwiXCIsXCJ0eXBlXCI6XCJ1aW50MjU2XCJ9XSxcIm5hbWVcIjpcInN0YWtlaG9sZGVyc1wiLFwib3V0cHV0c1wiOlt7XCJuYW1lXCI6XCJcIixcInR5cGVcIjpcImFkZHJlc3NcIn1dLFwidHlwZVwiOlwiZnVuY3Rpb25cIn0se1wiY29uc3RhbnRcIjp0cnVlLFwiaW5wdXRzXCI6W10sXCJuYW1lXCI6XCJnb2FsXCIsXCJvdXRwdXRzXCI6W3tcIm5hbWVcIjpcIlwiLFwidHlwZVwiOlwidWludDI1NlwifV0sXCJ0eXBlXCI6XCJmdW5jdGlvblwifSx7XCJjb25zdGFudFwiOmZhbHNlLFwiaW5wdXRzXCI6W10sXCJuYW1lXCI6XCJyZWZ1bmRTdGFrZVwiLFwib3V0cHV0c1wiOltdLFwidHlwZVwiOlwiZnVuY3Rpb25cIn0se1wiY29uc3RhbnRcIjpmYWxzZSxcImlucHV0c1wiOltdLFwibmFtZVwiOlwiZGVzdHJveVwiLFwib3V0cHV0c1wiOltdLFwidHlwZVwiOlwiZnVuY3Rpb25cIn0se1wiY29uc3RhbnRcIjp0cnVlLFwiaW5wdXRzXCI6W10sXCJuYW1lXCI6XCJpbmNyZW1lbnRcIixcIm91dHB1dHNcIjpbe1wibmFtZVwiOlwiXCIsXCJ0eXBlXCI6XCJ1aW50MjU2XCJ9XSxcInR5cGVcIjpcImZ1bmN0aW9uXCJ9LHtcImNvbnN0YW50XCI6dHJ1ZSxcImlucHV0c1wiOltdLFwibmFtZVwiOlwibnVtU3Rha2Vob2xkZXJzXCIsXCJvdXRwdXRzXCI6W3tcIm5hbWVcIjpcIlwiLFwidHlwZVwiOlwidWludDI1NlwifV0sXCJ0eXBlXCI6XCJmdW5jdGlvblwifSx7XCJjb25zdGFudFwiOmZhbHNlLFwiaW5wdXRzXCI6W3tcIm5hbWVcIjpcInJlamVjdFBhcnRpYWxCZXRzXCIsXCJ0eXBlXCI6XCJib29sXCJ9XSxcIm5hbWVcIjpcImJ1eVN0YWtlXCIsXCJvdXRwdXRzXCI6W10sXCJ0eXBlXCI6XCJmdW5jdGlvblwifSx7XCJjb25zdGFudFwiOnRydWUsXCJpbnB1dHNcIjpbe1wibmFtZVwiOlwiXCIsXCJ0eXBlXCI6XCJ1aW50MjU2XCJ9XSxcIm5hbWVcIjpcInJlY2VudFdpbnNcIixcIm91dHB1dHNcIjpbe1wibmFtZVwiOlwid2lubmVyXCIsXCJ0eXBlXCI6XCJhZGRyZXNzXCJ9LHtcIm5hbWVcIjpcInRpbWVzdGFtcFwiLFwidHlwZVwiOlwidWludDI1NlwifSx7XCJuYW1lXCI6XCJzdGFrZVwiLFwidHlwZVwiOlwidWludDI1NlwifV0sXCJ0eXBlXCI6XCJmdW5jdGlvblwifSx7XCJjb25zdGFudFwiOnRydWUsXCJpbnB1dHNcIjpbXSxcIm5hbWVcIjpcImhvc3RcIixcIm91dHB1dHNcIjpbe1wibmFtZVwiOlwiXCIsXCJ0eXBlXCI6XCJhZGRyZXNzXCJ9XSxcInR5cGVcIjpcImZ1bmN0aW9uXCJ9LHtcImlucHV0c1wiOlt7XCJuYW1lXCI6XCJfZ29hbEluRmlubmV5XCIsXCJ0eXBlXCI6XCJ1aW50MjU2XCJ9LHtcIm5hbWVcIjpcIl9pbmNyZW1lbnRJbkZpbm5leVwiLFwidHlwZVwiOlwidWludDI1NlwifSx7XCJuYW1lXCI6XCJfcmVjZW50V2luc0NvdW50XCIsXCJ0eXBlXCI6XCJ1aW50OFwifV0sXCJ0eXBlXCI6XCJjb25zdHJ1Y3RvclwifSx7XCJhbm9ueW1vdXNcIjpmYWxzZSxcImlucHV0c1wiOlt7XCJpbmRleGVkXCI6ZmFsc2UsXCJuYW1lXCI6XCJ3aW5uZXJcIixcInR5cGVcIjpcImFkZHJlc3NcIn0se1wiaW5kZXhlZFwiOmZhbHNlLFwibmFtZVwiOlwidGltZXN0YW1wXCIsXCJ0eXBlXCI6XCJ1aW50MjU2XCJ9LHtcImluZGV4ZWRcIjpmYWxzZSxcIm5hbWVcIjpcInN0YWtlXCIsXCJ0eXBlXCI6XCJ1aW50MjU2XCJ9XSxcIm5hbWVcIjpcIldvblwiLFwidHlwZVwiOlwiZXZlbnRcIn0se1wiYW5vbnltb3VzXCI6ZmFsc2UsXCJpbnB1dHNcIjpbe1wiaW5kZXhlZFwiOmZhbHNlLFwibmFtZVwiOlwic3Rha2Vob2xkZXJcIixcInR5cGVcIjpcImFkZHJlc3NcIn1dLFwibmFtZVwiOlwiQ2hhbmdlZFN0YWtlXCIsXCJ0eXBlXCI6XCJldmVudFwifV07XG4gICAgICB2YXIgY29udHJhY3RCbHVlcHJpbnQgPSBldGhlcmV1bS53ZWIzLmV0aC5jb250cmFjdChhYmkpO1xuICAgICAgY29udHJhY3QgPSBjb250cmFjdEJsdWVwcmludC5hdChjb250cmFjdEFkZHJlc3MpO1xuXG4gICAgICB2bS5nb2FsID0gZXRoZXJldW0ud2ViMy5mcm9tV2VpKGNvbnRyYWN0LmdvYWwoKSwgJ2V0aGVyJykudG9TdHJpbmcoKTtcbiAgICAgIHZtLnNsaWRlclN0ZXAgPSBldGhlcmV1bS53ZWIzLmZyb21XZWkoY29udHJhY3QuaW5jcmVtZW50KCksICdldGhlcicpLnRvU3RyaW5nKCk7XG4gICAgICB2bS5vblNsaWRlckNoYW5nZWQgPSBvblNsaWRlckNoYW5nZWQ7XG5cbiAgICAgIHZtLmFjY291bnRzID0gZXRoZXJldW0ud2ViMy5ldGguYWNjb3VudHM7XG4gICAgICB2bS5zZWxlY3RlZEFjY291bnQgPSBldGhlcmV1bS53ZWIzLmV0aC5kZWZhdWx0QWNjb3VudDtcbiAgICAgIGlmKCF2bS5zZWxlY3RlZEFjY291bnQpIHtcbiAgICAgICAgdm0uc2VsZWN0ZWRBY2NvdW50ID0gZXRoZXJldW0ud2ViMy5ldGguY29pbmJhc2U7XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZVN0YWtlcygpO1xuICAgICAgdXBkYXRlQmFsYW5jZSgpO1xuICAgICAgdXBkYXRlQ2hhcnQoKTtcbiAgICAgIHVwZGF0ZVJlY2VudFJlc3VsdHMoKTtcblxuICAgICAgdmFyIG9uU3Rha2VDaGFuZ2VkRXZlbnQgPSBjb250cmFjdC5DaGFuZ2VkU3Rha2UoKTtcbiAgICAgIG9uU3Rha2VDaGFuZ2VkRXZlbnQud2F0Y2gob25TdGFrZUNoYW5nZWQpO1xuXG4gICAgICB2YXIgb25Xb25FdmVudCA9IGNvbnRyYWN0LldvbigpO1xuICAgICAgb25Xb25FdmVudC53YXRjaChvbldvbik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlQmFsYW5jZSgpIHtcbiAgICAgIGlmKCFldGhlcmV1bS5pc0Nvbm5lY3RlZCgpKSB7IHJldHVybjsgfVxuXG4gICAgICB2YXIgd2VpID0gZXRoZXJldW0ud2ViMy5ldGguZ2V0QmFsYW5jZShjb250cmFjdEFkZHJlc3MpO1xuICAgICAgdmFyIGV0aGVyID0gZXRoZXJldW0ud2ViMy5mcm9tV2VpKHdlaSwgJ2V0aGVyJyk7XG4gICAgICB2bS5iYWxhbmNlID0gcGFyc2VGbG9hdChldGhlci50b1N0cmluZygpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVTdGFrZXMoKSB7XG4gICAgICBpZighZXRoZXJldW0uaXNDb25uZWN0ZWQoKSkgeyByZXR1cm47IH1cbiAgICAgIHZtLmN1cnJlbnRTdGFrZXMgPSBldGhlcmV1bS53ZWIzLmZyb21XZWkoY29udHJhY3Quc3Rha2VzKHZtLnNlbGVjdGVkQWNjb3VudCksICdldGhlcicpLnRvU3RyaW5nKCk7XG4gICAgICB2bS5kZXNpcmVkU3Rha2VzID0gdm0uY3VycmVudFN0YWtlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVDaGFydCgpIHtcbiAgICAgIGlmKCFldGhlcmV1bS5pc0Nvbm5lY3RlZCgpKSB7IHJldHVybjsgfVxuXG4gICAgICB2bS5zdGFrZUluZGljZXMgPSB7fTtcbiAgICAgIHZtLndoZWVsTGFiZWxzLmxlbmd0aCA9IDA7XG4gICAgICB2bS53aGVlbERhdGEubGVuZ3RoID0gMDtcbiAgICAgIHZtLndoZWVsQ29sb3Vycy5sZW5ndGggPSAwO1xuXG4gICAgICB2YXIgbnVtU3Rha2Vob2xkZXJzID0gY29udHJhY3QubnVtU3Rha2Vob2xkZXJzKCk7XG4gICAgICBmb3IodmFyIGkgPSAwOyBpIDwgbnVtU3Rha2Vob2xkZXJzOyArK2kpIHtcbiAgICAgICAgdmFyIHN0YWtlaG9sZGVyID0gY29udHJhY3Quc3Rha2Vob2xkZXJzKGkpO1xuICAgICAgICB2bS53aGVlbExhYmVscy5wdXNoKHN0YWtlaG9sZGVyLnRvU3RyaW5nKCkpO1xuICAgICAgICB2bS53aGVlbERhdGEucHVzaChldGhlcmV1bS53ZWIzLmZyb21XZWkoY29udHJhY3Quc3Rha2VzKHN0YWtlaG9sZGVyKSwgJ2V0aGVyJykpO1xuICAgICAgICB2bS53aGVlbENvbG91cnMucHVzaCgnI0M5OUQ2NicpO1xuICAgICAgICB2bS5zdGFrZUluZGljZXNbc3Rha2Vob2xkZXIudG9TdHJpbmcoKV0gPSBpO1xuICAgICAgfVxuXG4gICAgICB2bS53aGVlbExhYmVscy5wdXNoKCdFbXB0eScpO1xuICAgICAgdm0ud2hlZWxEYXRhLnB1c2goZXRoZXJldW0ud2ViMy5mcm9tV2VpKGNvbnRyYWN0LmdvYWwoKSAtIGV0aGVyZXVtLndlYjMuZXRoLmdldEJhbGFuY2UoY29udHJhY3RBZGRyZXNzKSwgJ2V0aGVyJykpO1xuICAgICAgdm0ud2hlZWxDb2xvdXJzLnB1c2goZW1wdHlCYXJDb2xvdXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZVJlY2VudFJlc3VsdHMoKSB7XG4gICAgICBpZighZXRoZXJldW0uaXNDb25uZWN0ZWQoKSkgeyByZXR1cm47IH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvblN0YWtlQ2hhbmdlZChlcnJvciwgcmVzdWx0KSB7XG4gICAgICB1cGRhdGVCYWxhbmNlKCk7XG4gICAgICB1cGRhdGVTdGFrZXMoKTtcbiAgICAgIHVwZGF0ZUNoYXJ0KCk7XG4gICAgICAkc2NvcGUuJGFwcGx5KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25Xb24oZXJyb3IsIHJlc3VsdCkge1xuICAgICAgdXBkYXRlQmFsYW5jZSgpO1xuICAgICAgdXBkYXRlU3Rha2VzKCk7XG4gICAgICB1cGRhdGVDaGFydCgpO1xuICAgICAgdXBkYXRlUmVjZW50UmVzdWx0cygpO1xuICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uU2xpZGVyQ2hhbmdlZChzbGlkZXJJZCwgbW9kZWxWYWx1ZSkge1xuICAgICAgdm0ud2hlZWxEYXRhW3ZtLnN0YWtlSW5kaWNlc1t2bS5zZWxlY3RlZEFjY291bnQudG9TdHJpbmcoKV1dID0gbW9kZWxWYWx1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWxvYWRQYWdlKCkge1xuICAgICAgJHJvdXRlLnJlbG9hZCgpO1xuICAgIH1cbiAgfVxufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXIubW9kdWxlKCdldGhlci1zcGlubmVyJywgW1xuICAgICduZ1JvdXRlJyxcbiAgICAnY2hhcnQuanMnLFxuICAgICdyek1vZHVsZSdcbiAgXSkuXG4gIGNvbmZpZyhbJyRyb3V0ZVByb3ZpZGVyJywgZnVuY3Rpb24oJHJvdXRlUHJvdmlkZXIpIHtcbiAgICAkcm91dGVQcm92aWRlci5vdGhlcndpc2Uoe3JlZGlyZWN0VG86ICcvJ30pO1xuICB9XSk7XG59KSgpO1xuXG4oZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBTcGlubmVyQ3RybC4kaW5qZWN0ID0gW1wiJHJvdXRlXCIsIFwiJHNjb3BlXCIsIFwiZXRoZXJldW1cIl07XG4gIGFuZ3VsYXIubW9kdWxlKCdldGhlci1zcGlubmVyJykuY29udHJvbGxlcignU3Bpbm5lckN0cmwnLCBTcGlubmVyQ3RybCk7XG5cbiAgLypAbmdJbmplY3QqL1xuICBmdW5jdGlvbiBTcGlubmVyQ3RybCgkcm91dGUsICRzY29wZSwgZXRoZXJldW0pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLmlzQ29ubmVjdGVkID0gZXRoZXJldW0uaXNDb25uZWN0ZWQ7XG5cbiAgICB2YXIgZW1wdHlCYXJDb2xvdXIgPSAnIzNEM0UzRic7XG4gICAgdm0ud2hlZWxMYWJlbHMgPSBbXCJFbXB0eVwiXTtcbiAgICB2bS53aGVlbERhdGEgPSBbNS4wXTtcbiAgICB2bS53aGVlbENvbG91cnMgPSBbZW1wdHlCYXJDb2xvdXJdO1xuXG4gICAgdmFyIGNvbnRyYWN0QWRkcmVzcyA9ICcweGFDRDllMWU2ODYyMjI4NUNjM2QzMzlEMDRiNzZCQTdhY0VFNkZDMUMnO1xuICAgIHZhciBjb250cmFjdCA9IG51bGw7XG5cbiAgICBhY3RpdmF0ZSgpO1xuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICBpZighZXRoZXJldW0uaXNDb25uZWN0ZWQoKSkgeyByZXR1cm47IH1cblxuICAgICAgdmFyIGFiaSA9IFt7XCJjb25zdGFudFwiOnRydWUsXCJpbnB1dHNcIjpbe1wibmFtZVwiOlwiXCIsXCJ0eXBlXCI6XCJhZGRyZXNzXCJ9XSxcIm5hbWVcIjpcInN0YWtlc1wiLFwib3V0cHV0c1wiOlt7XCJuYW1lXCI6XCJcIixcInR5cGVcIjpcInVpbnQyNTZcIn1dLFwidHlwZVwiOlwiZnVuY3Rpb25cIn0se1wiY29uc3RhbnRcIjp0cnVlLFwiaW5wdXRzXCI6W3tcIm5hbWVcIjpcIlwiLFwidHlwZVwiOlwidWludDI1NlwifV0sXCJuYW1lXCI6XCJzdGFrZWhvbGRlcnNcIixcIm91dHB1dHNcIjpbe1wibmFtZVwiOlwiXCIsXCJ0eXBlXCI6XCJhZGRyZXNzXCJ9XSxcInR5cGVcIjpcImZ1bmN0aW9uXCJ9LHtcImNvbnN0YW50XCI6dHJ1ZSxcImlucHV0c1wiOltdLFwibmFtZVwiOlwiZ29hbFwiLFwib3V0cHV0c1wiOlt7XCJuYW1lXCI6XCJcIixcInR5cGVcIjpcInVpbnQyNTZcIn1dLFwidHlwZVwiOlwiZnVuY3Rpb25cIn0se1wiY29uc3RhbnRcIjpmYWxzZSxcImlucHV0c1wiOltdLFwibmFtZVwiOlwicmVmdW5kU3Rha2VcIixcIm91dHB1dHNcIjpbXSxcInR5cGVcIjpcImZ1bmN0aW9uXCJ9LHtcImNvbnN0YW50XCI6ZmFsc2UsXCJpbnB1dHNcIjpbXSxcIm5hbWVcIjpcImRlc3Ryb3lcIixcIm91dHB1dHNcIjpbXSxcInR5cGVcIjpcImZ1bmN0aW9uXCJ9LHtcImNvbnN0YW50XCI6dHJ1ZSxcImlucHV0c1wiOltdLFwibmFtZVwiOlwiaW5jcmVtZW50XCIsXCJvdXRwdXRzXCI6W3tcIm5hbWVcIjpcIlwiLFwidHlwZVwiOlwidWludDI1NlwifV0sXCJ0eXBlXCI6XCJmdW5jdGlvblwifSx7XCJjb25zdGFudFwiOnRydWUsXCJpbnB1dHNcIjpbXSxcIm5hbWVcIjpcIm51bVN0YWtlaG9sZGVyc1wiLFwib3V0cHV0c1wiOlt7XCJuYW1lXCI6XCJcIixcInR5cGVcIjpcInVpbnQyNTZcIn1dLFwidHlwZVwiOlwiZnVuY3Rpb25cIn0se1wiY29uc3RhbnRcIjpmYWxzZSxcImlucHV0c1wiOlt7XCJuYW1lXCI6XCJyZWplY3RQYXJ0aWFsQmV0c1wiLFwidHlwZVwiOlwiYm9vbFwifV0sXCJuYW1lXCI6XCJidXlTdGFrZVwiLFwib3V0cHV0c1wiOltdLFwidHlwZVwiOlwiZnVuY3Rpb25cIn0se1wiY29uc3RhbnRcIjp0cnVlLFwiaW5wdXRzXCI6W3tcIm5hbWVcIjpcIlwiLFwidHlwZVwiOlwidWludDI1NlwifV0sXCJuYW1lXCI6XCJyZWNlbnRXaW5zXCIsXCJvdXRwdXRzXCI6W3tcIm5hbWVcIjpcIndpbm5lclwiLFwidHlwZVwiOlwiYWRkcmVzc1wifSx7XCJuYW1lXCI6XCJ0aW1lc3RhbXBcIixcInR5cGVcIjpcInVpbnQyNTZcIn0se1wibmFtZVwiOlwic3Rha2VcIixcInR5cGVcIjpcInVpbnQyNTZcIn1dLFwidHlwZVwiOlwiZnVuY3Rpb25cIn0se1wiY29uc3RhbnRcIjp0cnVlLFwiaW5wdXRzXCI6W10sXCJuYW1lXCI6XCJob3N0XCIsXCJvdXRwdXRzXCI6W3tcIm5hbWVcIjpcIlwiLFwidHlwZVwiOlwiYWRkcmVzc1wifV0sXCJ0eXBlXCI6XCJmdW5jdGlvblwifSx7XCJpbnB1dHNcIjpbe1wibmFtZVwiOlwiX2dvYWxJbkZpbm5leVwiLFwidHlwZVwiOlwidWludDI1NlwifSx7XCJuYW1lXCI6XCJfaW5jcmVtZW50SW5GaW5uZXlcIixcInR5cGVcIjpcInVpbnQyNTZcIn0se1wibmFtZVwiOlwiX3JlY2VudFdpbnNDb3VudFwiLFwidHlwZVwiOlwidWludDhcIn1dLFwidHlwZVwiOlwiY29uc3RydWN0b3JcIn0se1wiYW5vbnltb3VzXCI6ZmFsc2UsXCJpbnB1dHNcIjpbe1wiaW5kZXhlZFwiOmZhbHNlLFwibmFtZVwiOlwid2lubmVyXCIsXCJ0eXBlXCI6XCJhZGRyZXNzXCJ9LHtcImluZGV4ZWRcIjpmYWxzZSxcIm5hbWVcIjpcInRpbWVzdGFtcFwiLFwidHlwZVwiOlwidWludDI1NlwifSx7XCJpbmRleGVkXCI6ZmFsc2UsXCJuYW1lXCI6XCJzdGFrZVwiLFwidHlwZVwiOlwidWludDI1NlwifV0sXCJuYW1lXCI6XCJXb25cIixcInR5cGVcIjpcImV2ZW50XCJ9LHtcImFub255bW91c1wiOmZhbHNlLFwiaW5wdXRzXCI6W3tcImluZGV4ZWRcIjpmYWxzZSxcIm5hbWVcIjpcInN0YWtlaG9sZGVyXCIsXCJ0eXBlXCI6XCJhZGRyZXNzXCJ9XSxcIm5hbWVcIjpcIkNoYW5nZWRTdGFrZVwiLFwidHlwZVwiOlwiZXZlbnRcIn1dO1xuICAgICAgdmFyIGNvbnRyYWN0Qmx1ZXByaW50ID0gZXRoZXJldW0ud2ViMy5ldGguY29udHJhY3QoYWJpKTtcbiAgICAgIGNvbnRyYWN0ID0gY29udHJhY3RCbHVlcHJpbnQuYXQoY29udHJhY3RBZGRyZXNzKTtcblxuICAgICAgdm0uZ29hbCA9IGV0aGVyZXVtLndlYjMuZnJvbVdlaShjb250cmFjdC5nb2FsKCksICdldGhlcicpLnRvU3RyaW5nKCk7XG4gICAgICB2bS5zbGlkZXJTdGVwID0gZXRoZXJldW0ud2ViMy5mcm9tV2VpKGNvbnRyYWN0LmluY3JlbWVudCgpLCAnZXRoZXInKS50b1N0cmluZygpO1xuICAgICAgdm0ub25TbGlkZXJDaGFuZ2VkID0gb25TbGlkZXJDaGFuZ2VkO1xuXG4gICAgICB2bS5hY2NvdW50cyA9IGV0aGVyZXVtLndlYjMuZXRoLmFjY291bnRzO1xuICAgICAgdm0uc2VsZWN0ZWRBY2NvdW50ID0gZXRoZXJldW0ud2ViMy5ldGguZGVmYXVsdEFjY291bnQ7XG4gICAgICBpZighdm0uc2VsZWN0ZWRBY2NvdW50KSB7XG4gICAgICAgIHZtLnNlbGVjdGVkQWNjb3VudCA9IGV0aGVyZXVtLndlYjMuZXRoLmNvaW5iYXNlO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGVTdGFrZXMoKTtcbiAgICAgIHVwZGF0ZUJhbGFuY2UoKTtcbiAgICAgIHVwZGF0ZUNoYXJ0KCk7XG4gICAgICB1cGRhdGVSZWNlbnRSZXN1bHRzKCk7XG5cbiAgICAgIHZhciBvblN0YWtlQ2hhbmdlZEV2ZW50ID0gY29udHJhY3QuQ2hhbmdlZFN0YWtlKCk7XG4gICAgICBvblN0YWtlQ2hhbmdlZEV2ZW50LndhdGNoKG9uU3Rha2VDaGFuZ2VkKTtcblxuICAgICAgdmFyIG9uV29uRXZlbnQgPSBjb250cmFjdC5Xb24oKTtcbiAgICAgIG9uV29uRXZlbnQud2F0Y2gob25Xb24pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZUJhbGFuY2UoKSB7XG4gICAgICBpZighZXRoZXJldW0uaXNDb25uZWN0ZWQoKSkgeyByZXR1cm47IH1cblxuICAgICAgdmFyIHdlaSA9IGV0aGVyZXVtLndlYjMuZXRoLmdldEJhbGFuY2UoY29udHJhY3RBZGRyZXNzKTtcbiAgICAgIHZhciBldGhlciA9IGV0aGVyZXVtLndlYjMuZnJvbVdlaSh3ZWksICdldGhlcicpO1xuICAgICAgdm0uYmFsYW5jZSA9IHBhcnNlRmxvYXQoZXRoZXIudG9TdHJpbmcoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlU3Rha2VzKCkge1xuICAgICAgaWYoIWV0aGVyZXVtLmlzQ29ubmVjdGVkKCkpIHsgcmV0dXJuOyB9XG4gICAgICB2bS5jdXJyZW50U3Rha2VzID0gZXRoZXJldW0ud2ViMy5mcm9tV2VpKGNvbnRyYWN0LnN0YWtlcyh2bS5zZWxlY3RlZEFjY291bnQpLCAnZXRoZXInKS50b1N0cmluZygpO1xuICAgICAgdm0uZGVzaXJlZFN0YWtlcyA9IHZtLmN1cnJlbnRTdGFrZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlQ2hhcnQoKSB7XG4gICAgICBpZighZXRoZXJldW0uaXNDb25uZWN0ZWQoKSkgeyByZXR1cm47IH1cblxuICAgICAgdm0uc3Rha2VJbmRpY2VzID0ge307XG4gICAgICB2bS53aGVlbExhYmVscy5sZW5ndGggPSAwO1xuICAgICAgdm0ud2hlZWxEYXRhLmxlbmd0aCA9IDA7XG4gICAgICB2bS53aGVlbENvbG91cnMubGVuZ3RoID0gMDtcblxuICAgICAgdmFyIG51bVN0YWtlaG9sZGVycyA9IGNvbnRyYWN0Lm51bVN0YWtlaG9sZGVycygpO1xuICAgICAgZm9yKHZhciBpID0gMDsgaSA8IG51bVN0YWtlaG9sZGVyczsgKytpKSB7XG4gICAgICAgIHZhciBzdGFrZWhvbGRlciA9IGNvbnRyYWN0LnN0YWtlaG9sZGVycyhpKTtcbiAgICAgICAgdm0ud2hlZWxMYWJlbHMucHVzaChzdGFrZWhvbGRlci50b1N0cmluZygpKTtcbiAgICAgICAgdm0ud2hlZWxEYXRhLnB1c2goZXRoZXJldW0ud2ViMy5mcm9tV2VpKGNvbnRyYWN0LnN0YWtlcyhzdGFrZWhvbGRlciksICdldGhlcicpKTtcbiAgICAgICAgdm0ud2hlZWxDb2xvdXJzLnB1c2goJyNDOTlENjYnKTtcbiAgICAgICAgdm0uc3Rha2VJbmRpY2VzW3N0YWtlaG9sZGVyLnRvU3RyaW5nKCldID0gaTtcbiAgICAgIH1cblxuICAgICAgdm0ud2hlZWxMYWJlbHMucHVzaCgnRW1wdHknKTtcbiAgICAgIHZtLndoZWVsRGF0YS5wdXNoKGV0aGVyZXVtLndlYjMuZnJvbVdlaShjb250cmFjdC5nb2FsKCkgLSBldGhlcmV1bS53ZWIzLmV0aC5nZXRCYWxhbmNlKGNvbnRyYWN0QWRkcmVzcyksICdldGhlcicpKTtcbiAgICAgIHZtLndoZWVsQ29sb3Vycy5wdXNoKGVtcHR5QmFyQ29sb3VyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVSZWNlbnRSZXN1bHRzKCkge1xuICAgICAgaWYoIWV0aGVyZXVtLmlzQ29ubmVjdGVkKCkpIHsgcmV0dXJuOyB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25TdGFrZUNoYW5nZWQoZXJyb3IsIHJlc3VsdCkge1xuICAgICAgdXBkYXRlQmFsYW5jZSgpO1xuICAgICAgdXBkYXRlU3Rha2VzKCk7XG4gICAgICB1cGRhdGVDaGFydCgpO1xuICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uV29uKGVycm9yLCByZXN1bHQpIHtcbiAgICAgIHVwZGF0ZUJhbGFuY2UoKTtcbiAgICAgIHVwZGF0ZVN0YWtlcygpO1xuICAgICAgdXBkYXRlQ2hhcnQoKTtcbiAgICAgIHVwZGF0ZVJlY2VudFJlc3VsdHMoKTtcbiAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvblNsaWRlckNoYW5nZWQoc2xpZGVySWQsIG1vZGVsVmFsdWUpIHtcbiAgICAgIHZtLndoZWVsRGF0YVt2bS5zdGFrZUluZGljZXNbdm0uc2VsZWN0ZWRBY2NvdW50LnRvU3RyaW5nKCldXSA9IG1vZGVsVmFsdWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVsb2FkUGFnZSgpIHtcbiAgICAgICRyb3V0ZS5yZWxvYWQoKTtcbiAgICB9XG4gIH1cbn0pKCk7XG5cbihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnZXRoZXItc3Bpbm5lcicpLnNlcnZpY2UoJ2V0aGVyZXVtJywgZXRoZXJldW0pO1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gZXRoZXJldW0oKSB7XG4gICAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgICAgd2ViMzogbmV3IFdlYjMoKSxcbiAgICAgICAgaXNDb25uZWN0ZWQ6IGlzQ29ubmVjdGVkXG4gICAgICB9O1xuXG4gICAgICBhY3RpdmF0ZSgpO1xuXG4gICAgICByZXR1cm4gc2VydmljZTtcblxuICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgICAgc2VydmljZS53ZWIzLnNldFByb3ZpZGVyKG5ldyBzZXJ2aWNlLndlYjMucHJvdmlkZXJzLkh0dHBQcm92aWRlcihcImh0dHA6Ly9sb2NhbGhvc3Q6ODU0NVwiKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGlzQ29ubmVjdGVkKCkge1xuICAgICAgICByZXR1cm4gc2VydmljZS53ZWIzLmN1cnJlbnRQcm92aWRlci5pc0Nvbm5lY3RlZCgpO1xuICAgICAgfVxuICAgIH1cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ2V0aGVyLXNwaW5uZXInKS5zZXJ2aWNlKCdldGhlcmV1bScsIGV0aGVyZXVtKTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGV0aGVyZXVtKCkge1xuICAgICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICAgIHdlYjM6IG5ldyBXZWIzKCksXG4gICAgICAgIGlzQ29ubmVjdGVkOiBpc0Nvbm5lY3RlZFxuICAgICAgfTtcblxuICAgICAgYWN0aXZhdGUoKTtcblxuICAgICAgcmV0dXJuIHNlcnZpY2U7XG5cbiAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICAgIHNlcnZpY2Uud2ViMy5zZXRQcm92aWRlcihuZXcgc2VydmljZS53ZWIzLnByb3ZpZGVycy5IdHRwUHJvdmlkZXIoXCJodHRwOi8vbG9jYWxob3N0Ojg1NDVcIikpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpc0Nvbm5lY3RlZCgpIHtcbiAgICAgICAgcmV0dXJuIHNlcnZpY2Uud2ViMy5jdXJyZW50UHJvdmlkZXIuaXNDb25uZWN0ZWQoKTtcbiAgICAgIH1cbiAgICB9XG59KSgpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
