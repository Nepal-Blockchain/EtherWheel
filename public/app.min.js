!function(){"use strict";angular.module("ether-spinner",["ngRoute","rzModule"]).config(["$routeProvider",function(e){e.otherwise({redirectTo:"/"})}])}(),function(){"use strict";function e(e,t,n){function a(){if(o(),n.isConnected()){var e=[{constant:!0,inputs:[{name:"",type:"address"}],name:"stakes",outputs:[{name:"",type:"uint256"}],type:"function"},{constant:!0,inputs:[{name:"",type:"uint256"}],name:"stakeholders",outputs:[{name:"",type:"address"}],type:"function"},{constant:!0,inputs:[],name:"goal",outputs:[{name:"",type:"uint256"}],type:"function"},{constant:!1,inputs:[],name:"refundStake",outputs:[],type:"function"},{constant:!1,inputs:[],name:"destroy",outputs:[],type:"function"},{constant:!0,inputs:[],name:"increment",outputs:[{name:"",type:"uint256"}],type:"function"},{constant:!0,inputs:[],name:"numStakeholders",outputs:[{name:"",type:"uint256"}],type:"function"},{constant:!1,inputs:[{name:"rejectPartialBets",type:"bool"}],name:"buyStake",outputs:[],type:"function"},{constant:!0,inputs:[{name:"",type:"uint256"}],name:"recentWins",outputs:[{name:"winner",type:"address"},{name:"timestamp",type:"uint256"},{name:"stake",type:"uint256"}],type:"function"},{constant:!0,inputs:[],name:"host",outputs:[{name:"",type:"address"}],type:"function"},{inputs:[{name:"_goalInFinney",type:"uint256"},{name:"_incrementInFinney",type:"uint256"},{name:"_recentWinsCount",type:"uint8"}],type:"constructor"},{anonymous:!1,inputs:[{indexed:!1,name:"winner",type:"address"},{indexed:!1,name:"timestamp",type:"uint256"},{indexed:!1,name:"stake",type:"uint256"}],name:"Won",type:"event"},{anonymous:!1,inputs:[{indexed:!1,name:"stakeholder",type:"address"}],name:"ChangedStake",type:"event"}],t=n.web3.eth.contract(e);h=t.at(g),l.goal=n.web3.fromWei(h.goal(),"ether").toString(),l.sliderStep=n.web3.fromWei(h.increment(),"ether").toString(),l.onSliderChanged=p,v.value=l.goal,l.accounts=n.web3.eth.accounts,l.selectedAccount=n.web3.eth.defaultAccount,l.selectedAccount||(l.selectedAccount=n.web3.eth.coinbase),s(),i(),u(),r();var a=h.ChangedStake();a.watch(c);var m=h.Won();m.watch(d)}}function o(){var e=[v],t={animationEasing:"easeInOut",segmentStrokeWidth:3,animationSteps:20,segmentStrokeColor:"#EBF0F1",percentageInnerCutout:75,responsive:!0,tooltipTemplate:function(e){var t=e.label+": "+e.value+" Îž";return l.goal&&(t+=" ("+e.value/l.goal*100+"%)"),t}},n=document.getElementById("wheel").getContext("2d");m=new Chart(n).Doughnut(e,t)}function u(){if(n.isConnected()){var e=n.web3.eth.getBalance(g),t=n.web3.fromWei(e,"ether");l.balance=parseFloat(t.toString()),m.segments[m.segments.length-1].value=l.goal-l.balance,m.update()}}function i(){n.isConnected()&&(l.currentStakes=n.web3.fromWei(h.stakes(l.selectedAccount),"ether").toString(),l.desiredStakes=l.currentStakes)}function s(){if(n.isConnected()){m.removeData(),y={};for(var e=h.numStakeholders(),t=0;e>t;++t){var a=h.stakeholders(t).toString();y[a]={label:a,value:n.web3.fromWei(h.stakes(a),"ether"),color:a===l.selectedAccount?"#C99D66":"#3D3E3F",index:t},m.addData(y[a])}m.addData(v),m.update()}}function r(){!n.isConnected()}function c(e,a){if(!e){var o=a.args.stakeholder.toString(),s=n.web3.fromWei(h.stakes(o),"ether");if(o in y)m.segments[y[o].index].value=s;else{var r=Object.keys(y).lengthupd;y[o]={label:o,value:s,color:o===l.selectedAccount?"#C99D66":"#3D3E3F",index:r},m.addData(y[o],r)}m.update()}u(),i(),t.$apply()}function d(e,n){u(),i(),r(),t.$apply()}function p(e,t){m.segments[y[l.selectedAccount.toString()].index].value=t,m.update()}var l=this;l.isConnected=n.isConnected;var m,y,f="#dae4e7",g="0xaCD9e1e68622285Cc3d339D04b76BA7acEE6FC1C",h=null,v={value:5,color:f,label:"Empty"};a()}e.$inject=["$route","$scope","ethereum"],angular.module("ether-spinner").controller("SpinnerCtrl",e)}(),function(){"use strict";function e(){function e(){n.web3.setProvider(new n.web3.providers.HttpProvider("http://localhost:8545"))}function t(){return n.web3.currentProvider.isConnected()}var n={web3:new Web3,isConnected:t};return e(),n}angular.module("ether-spinner").service("ethereum",e)}();
//# sourceMappingURL=data:application/json;base64,
