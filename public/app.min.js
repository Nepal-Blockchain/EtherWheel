!function(){"use strict";angular.module("ether-spinner",["ngRoute","rzModule","oitozero.ngSweetAlert","angularMoment"]).config(["$routeProvider",function(e){e.otherwise({redirectTo:"/"})}])}(),function(){"use strict";function e(e,t,n,o){function i(){if(u(),o.isConnected()){var e=[{constant:!0,inputs:[{name:"",type:"uint256"}],name:"contributors",outputs:[{name:"",type:"address"}],type:"function"},{constant:!0,inputs:[],name:"goal",outputs:[{name:"",type:"uint256"}],type:"function"},{constant:!0,inputs:[{name:"",type:"address"}],name:"contributions",outputs:[{name:"",type:"uint256"}],type:"function"},{constant:!1,inputs:[{name:"newHost",type:"address"}],name:"changeHost",outputs:[],type:"function"},{constant:!1,inputs:[],name:"destroy",outputs:[],type:"function"},{constant:!1,inputs:[{name:"amount",type:"uint256"}],name:"setContribution",outputs:[],type:"function"},{constant:!0,inputs:[],name:"numWinners",outputs:[{name:"",type:"uint256"}],type:"function"},{constant:!0,inputs:[],name:"numContributors",outputs:[{name:"",type:"uint256"}],type:"function"},{constant:!1,inputs:[],name:"addToContribution",outputs:[],type:"function"},{constant:!0,inputs:[],name:"increment",outputs:[{name:"",type:"uint256"}],type:"function"},{constant:!1,inputs:[{name:"amount",type:"uint256"}],name:"removeFromContribution",outputs:[],type:"function"},{constant:!0,inputs:[{name:"",type:"uint256"}],name:"recentWins",outputs:[{name:"winner",type:"address"},{name:"timestamp",type:"uint256"},{name:"contribution",type:"uint256"}],type:"function"},{constant:!0,inputs:[],name:"host",outputs:[{name:"",type:"address"}],type:"function"},{inputs:[{name:"_goalInFinney",type:"uint256"},{name:"_incrementInFinney",type:"uint256"},{name:"_recentWinsCount",type:"uint8"}],type:"constructor"},{anonymous:!1,inputs:[{indexed:!1,name:"winner",type:"address"},{indexed:!1,name:"timestamp",type:"uint256"},{indexed:!1,name:"contribution",type:"uint256"}],name:"Won",type:"event"},{anonymous:!1,inputs:[{indexed:!1,name:"contributor",type:"address"}],name:"ChangedContribution",type:"event"}],t=o.web3.eth.contract(e);W=t.at(w),h.goal=o.web3.fromWei(W.goal(),"ether").toString(),h.sliderStep=o.web3.fromWei(W.increment(),"ether").toString(),h.onSliderChanged=f,S.value=h.goal,h.accounts=o.web3.eth.accounts,h.selectedAccount=o.web3.eth.defaultAccount,h.selectedAccount||(h.selectedAccount=o.web3.eth.coinbase),d(),c(),h.desiredContribution=h.currentContribution,a(),s(),l();var n=W.ChangedContribution();n.watch(m);var i=W.Won();i.watch(b)}}function r(){function e(e,t){if(e){var o=e;o.toString().indexOf("unlock signer account")>=0&&(o+='<br><br>Make sure you\'re accessing this page through the <a href="https://github.com/ethereum/mist/releases/tag/0.3.6">early developer release</a> of Mist, the official Ethereum browser.'),n.swal({title:"Error Setting Contribution",text:o,type:"error",html:!0})}else n.swal({title:"Success!",text:"Your request has been successfully sent to the Ethereum network for processing. You'll see your account balance updated soon.<br><br><strong>This may take a minute or two</strong>.",type:"success",html:!0}),h.desiredContribution=h.currentContribution,y.segments[C[h.selectedAccount].index].value=h.currentContribution,s()}var t=o.web3.toWei(h.desiredContribution,"ether")-o.web3.toWei(h.currentContribution,"ether"),i=o.web3.toWei(h.desiredContribution,"ether"),r=0;t>0&&(r=t);var u={value:r,from:h.selectedAccount,to:w};u.gas=o.web3.eth.estimateGas(u)+1e5,console.log(u.gas.toString()),W.setContribution(i,u,e)}function u(){var e=[S],t={animationEasing:"easeInOut",segmentStrokeWidth:3,animationSteps:20,segmentStrokeColor:"#EBF0F1",percentageInnerCutout:75,responsive:!0,tooltipTemplate:function(e){var t=e.label===h.selectedAccount?"You":e.label,n=t+": "+e.value.toFixed(2)+" Îž";if(h.goal){var o=e.value/h.goal*100;n+=" ("+Math.round(100*o)/100+"%)"}return n}},n=document.getElementById("wheel").getContext("2d");y=new Chart(n).Doughnut(e,t)}function a(){if(o.isConnected()){var e=o.web3.eth.getBalance(w),t=o.web3.fromWei(e,"ether");h.balance=parseFloat(t.toString())}}function s(){var e=h.desiredContribution-h.currentContribution;h.newBalance=h.balance+e,y.segments[y.segments.length-1].value=h.goal-h.newBalance,y.update()}function c(){o.isConnected()&&(a(),h.currentContribution=parseFloat(o.web3.fromWei(W.contributions(h.selectedAccount),"ether").toString()),h.desiredContribution=Math.min(h.desiredContribution,h.goal-h.balance+h.currentContribution),s())}function d(){if(o.isConnected()){y.removeData(),C={};for(var e=W.numContributors(),t=0;e>t;++t){var n=W.contributors(t).toString();C[n]={label:n,value:o.web3.fromWei(W.contributions(n),"ether"),color:n===h.selectedAccount?"#5cb85c":"#3D3E3F",index:t},y.addData(C[n])}var i=h.selectedAccount.toString();if(!(i in C)){var r=Object.keys(C).length;C[i]={label:i,value:0,color:"#5cb85c",index:r},y.addData(C[i],r)}y.addData(S),y.update()}}function l(){if(o.isConnected()){h.recentWins=[];for(var e=W.numWinners(),t=0;e>t;++t)h.recentWins.push(W.recentWins(t))}}function p(){y.destroy(),u(),d(),c(),h.desiredContribution=h.currentContribution,a(),s()}function m(e,n){if(!e){var i=n.args.contributor.toString(),r=o.web3.fromWei(W.contributions(i),"ether");if(n.args.contributor==h.selectedAccount&&(c(),h.desiredContribution=h.currentContribution),i in C)y.segments[C[i].index].value=r;else{var u=Object.keys(C).length;C[i]={label:i,value:r,color:i===h.selectedAccount?"#5cb85c":"#3D3E3F",index:u},y.addData(C[i],u)}y.update()}a(),c(),s(),t.$apply()}function b(e,n){y.destroy(),u(),d(),c(),a(),s(),l(),t.$apply()}function f(e,t){var n=h.selectedAccount.toString();y.segments[C[n].index].value=t,s()}function g(e){return o.isConnected()?o.web3.fromWei(o.web3.eth.getBalance(e),"ether"):void 0}var h=this;h.isConnected=o.isConnected,h.setContribution=r,h.onAccountChanged=p,h.getBalance=g,h.fromWei=o.web3.fromWei,h.moment=moment;var y,C,v="#dce6e9",w="0x53891ef3793d8534Ad42312BcC77dFAd51Bb5F1C",W=null,S={value:5,color:v,label:"Empty"};i()}e.$inject=["$route","$scope","SweetAlert","ethereum"],angular.module("ether-spinner").controller("SpinnerCtrl",e)}(),function(){"use strict";function e(){function e(){n.web3.setProvider(new n.web3.providers.HttpProvider("http://localhost:8545"))}function t(){return n.web3.currentProvider.isConnected()}var n={web3:new Web3,isConnected:t};return e(),n}angular.module("ether-spinner").service("ethereum",e)}();
//# sourceMappingURL=data:application/json;base64,
